import asyncio
import os.path
import random
from asgiref.sync import sync_to_async
from django.core import paginator
from aiogram.dispatcher import FSMContext
from django.core.management.base import BaseCommand
from django.core.paginator import Paginator

from bot.models import *
from aiogram import executor
from aiogram.dispatcher.filters import Text
from aiogram.types import Message, CallbackQuery
from kaif import keyboards
from kaif.settings import dp
from kaif.settings import MEDIA_ROOT
import requests
from kaif import states
from bot.models import TelegramUser
from bot.management.commands import utils


HELLO_TEXT_PATH = os.path.join(os.path.dirname(__file__), 'hello.txt')
START_PHOTO_PATH = os.path.join(os.path.dirname(__file__), 'start.jpg')
INFO_TEXT_PATH = os.path.join(os.path.dirname(__file__), 'info.txt')
RULES_TEXT_PATH = os.path.join(os.path.dirname(__file__), 'rules.txt')
BONUS_TEXT_PATH = os.path.join(os.path.dirname(__file__), 'bonus.txt')
WORK_TEXT_PATH = os.path.join(os.path.dirname(__file__), 'work.txt')
CRYPTO_PAYMENTS = PaymentCrypto.objects.all()
PAYMENTS = [i.title for i in CRYPTO_PAYMENTS]


async def get_user_balance_in_text(user_id):
    user = (await TelegramUser.objects.aget_or_create(user_id=user_id))[0]
    course = get_course(user.balance)
    return f'–í–∞—à –±–∞–ª–∞–Ω—Å:  {course["rub"]} RUB / {course["btc"]} BTC / {course["ltc"]} LTC'


def get_course():
    ltc_course = requests.get('https://apirone.com/api/v2/ticker?currency=ltc').json()['rub']
    return ltc_course


def get_course_btc():
    btc_course = requests.get('https://apirone.com/api/v2/ticker?currency=btc').json()['rub']
    return btc_course


@dp.message_handler(Text('< –ù–∞–∑–∞–¥'), state=states.EnterAmount.enter)
@dp.message_handler(commands=['start'], state='*')
async def start(message: Message, state: FSMContext):
    await state.reset_data()
    await state.finish()
    await TelegramUser.objects.aget_or_create(user_id=message.chat.id, username=message.chat.username)

    with open(HELLO_TEXT_PATH, 'rb') as f:
        text = f.read().decode()

    if utils.START_PHOTO:
        await message.answer_photo(
            utils.START_PHOTO,
            caption=text,
            reply_markup=keyboards.get_start()
        )

    else:
        msg = await message.answer_photo(
            open(START_PHOTO_PATH, 'rb'),
            caption=text,
            reply_markup=keyboards.get_start()
        )
        utils.START_PHOTO = msg.photo[-1].file_id


@dp.callback_query_handler(lambda call: call.data == 'info')
async def get_info(call: CallbackQuery):
    with open(INFO_TEXT_PATH, 'rb') as f:
        await call.message.delete()
        await call.message.answer(
            f.read().decode(),
            reply_markup=keyboards.get_start()
        )


@dp.callback_query_handler(lambda call: call.data == 'rules')
async def get_rules(call: CallbackQuery):
    with open(RULES_TEXT_PATH, 'rb') as f:
        await call.message.delete()
        await call.message.answer(
            f.read().decode(),
            reply_markup=keyboards.get_start()
        )


@dp.callback_query_handler(lambda call: call.data == 'bonus')
async def get_bonus(call: CallbackQuery):
    with open(BONUS_TEXT_PATH, 'rb') as f:
        await call.message.delete()
        await call.message.answer(
            f.read().decode().replace('USER_ID', str(call.message.chat.id)),
            reply_markup=keyboards.get_start(),
            parse_mode='markdown'
        )


@dp.callback_query_handler(lambda call: call.data == 'work')
async def get_work(call: CallbackQuery):
    with open(WORK_TEXT_PATH, 'rb') as f:
        await call.message.delete()
        await call.message.answer(
            f.read().decode(),
            reply_markup=keyboards.get_start()
        )


@dp.callback_query_handler(lambda call: call.data == 'profile')
async def get_profile(call: CallbackQuery):
    username_text = f'–õ–æ–≥–∏–Ω: {call.message.chat.username}\n' if call.message.chat.username else ''
    surname = f'–§–∞–º–∏–ª–∏—è: {call.message.chat.last_name}\n' if call.message.chat.last_name else ''
    # TODO: –†–µ–π—Ç–∏–Ω–≥ –º–∞–≥–∞–∑–∏–Ω–∞.
    await call.message.answer(
        'üëë –ü—Ä–æ—Ñ–∏–ª—å üëë\n\n'
        f'{username_text}\n'
        f'–ò–º—è: {call.message.chat.first_name}\n\n'
        f'{surname}\n'
        '–†–µ–π—Ç–∏–Ω–≥ –º–∞–≥–∞–∑–∏–Ω–∞: ‚≠êÔ∏è 4.9/5 (2162 —à—Ç.)\n\n'
        '–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: 0 —Ä—É–±.\n'
        '–ü–æ–∫—É–ø–æ–∫: 0\n'
        '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞: 0 %\n\n'
        '–ü—Ä–∏–≥–ª–∞—à–µ–Ω—ã: 0\n'
        '–ë–æ–Ω—É—Å–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: 0 —Ä—É–±.\n\n'
        f'–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å: `https://t.me/GLuv_Bot?start={call.message.chat.id}`',
        reply_markup=keyboards.get_start(),
        parse_mode='markdown'
    )


@dp.callback_query_handler(lambda call: call.data == 'add_balance')
async def add_balance(call: CallbackQuery):
    await call.message.delete()
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞:', reply_markup=keyboards.get_payment_keyboard())


@dp.callback_query_handler(lambda call: call.data == 'to_start')
async def to_start_inline(call: CallbackQuery, state: FSMContext):
    await call.message.delete()
    await start(call.message, state)


@dp.callback_query_handler(lambda call: call.data.startswith('payment'))
async def get_count_of_money(call: CallbackQuery, state: FSMContext):
    await call.message.delete()
    crypto = await PaymentCrypto.objects.aget(title=call.data.replace('payment:', ''))
    await states.EnterAmount.enter.set()
    await state.set_data({'payment_type': crypto})
    await call.message.answer(
        '–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å.\n  <i>–°—É–º–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 300 –∏ –Ω–µ –±–æ–ª–µ–µ 300000</i>',
        reply_markup=keyboards.get_back(),
        parse_mode='html'
    )


@dp.message_handler(state=states.EnterAmount.enter)
async def enter_amount(message: Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer(
        '–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è!',
        reply_markup=keyboards.get_back()
    )

    amount = int(message.text)
    if not (300 < amount < 300000):
        return await message.answer(
        '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Å—É–º–º—É –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 300 –¥–æ 300000!',
        reply_markup=keyboards.get_back()
    )

    await message.answer(
        '–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ **#404933**\n'
        '–°–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: LTC\n'
        f'–ù–∞ –±–∞–ª–∞–Ω—Å: *{amount} —Ä—É–±*.\n\n'
        'üëá üëá üëá\n'
        f'–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: `{round(amount/get_course(), 4)}` LTC\n'
        '‚òùÔ∏è ‚òùÔ∏è ‚òùÔ∏è\n\n'
        '‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –¥–ª—è –æ–ø–ª–∞—Ç—ã! ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è\n'
        '–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã! –£ –≤–∞—Å –±—É–¥–µ—Ç 30 –º–∏–Ω—É—Ç –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ –±—ã –æ–ø–ª–∞—Ç–∏—Ç—å.'
        '–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.',
        parse_mode='markdown',
        reply_markup=keyboards.accept(amount)
    )
    await state.finish()


@dp.callback_query_handler(lambda call: call.data.startswith('accept'))
async def accept_deal(call: CallbackQuery):
    await call.message.delete()
    crypto = await PaymentCrypto.objects.aget(title='LTC')
    amount = int(call.data.replace('accept:', ''))
    await call.message.answer(
        '–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ **#404933**\n'
        '–°–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: LTC\n'
        f'–ù–∞ –±–∞–ª–∞–Ω—Å: *{amount} —Ä—É–±*.\n\n'
        'üëá üëá üëá\n'
        f'–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: `{round(amount/get_course(), 4)}` LTC\n'
        '‚òùÔ∏è ‚òùÔ∏è ‚òùÔ∏è\n\n'
        '‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è –ü–ï–†–ï–í–û–î–ò–¢–¨ –ù–ê–î–û –¢–û–ß–ù–£–Æ –°–£–ú–ú–£! ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è\n\n\n\n'
        f'–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã: `{crypto.card}`\n\n'
        '*–í—Ä–µ–º—è –¥–ª—è –æ–ø–ª–∞—Ç—ã - 30 –º–∏–Ω—É—Ç.*',
        reply_markup=keyboards.final(),
        parse_mode='markdown'
    )


@dp.callback_query_handler(lambda call: call.data == 'choose_city')
async def choose_city(call: CallbackQuery):
    await call.message.delete()
    cities = [i async for i in City.objects.all()]
    await call.message.answer(
        '***–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥:***',
        reply_markup=keyboards.choose_city(cities),
        parse_mode='markdown'
    )


@dp.callback_query_handler(lambda call: call.data.startswith('city'))
async def get_goods(call: CallbackQuery):
    await call.message.delete()
    city = await City.objects.aget(pk=int(call.data.replace('city:', '')))
    goods = [i async for i in Product.objects.filter(city=city, pre_order=False)]
    goods.reverse()

    if not goods:
        return await call.message.answer(
            '–£–ø—Å, –≤—Å–µ —É–∂–µ —Ä–∞—Å–∫—É–ø–∏–ª–∏... –û–∂–∏–¥–∞–π –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è',
            reply_markup=keyboards.get_start()
        )

    await call.message.answer(
        '–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!\n'
        '***–ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä:***',
        reply_markup=await keyboards.get_goods(list(goods)),
        parse_mode='markdown'
    )


@dp.callback_query_handler(lambda call: call.data.startswith('pcity'))
async def get_pre_city(call: CallbackQuery):
    await call.message.delete()
    city = await City.objects.aget(pk=int(call.data.replace('pcity:', '')))
    goods = [i async for i in Product.objects.filter(city=city, pre_order=True)]
    goods.reverse()

    if not goods:
        return await call.message.answer(
            '–£–ø—Å, –≤—Å–µ —É–∂–µ —Ä–∞—Å–∫—É–ø–∏–ª–∏... –û–∂–∏–¥–∞–π –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è',
            reply_markup=keyboards.get_start()
        )

    await call.message.answer(
        '–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!\n'
        '***–ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä:***',
        reply_markup=await keyboards.get_goods(list(goods)),
        parse_mode='markdown'
    )


@dp.callback_query_handler(lambda call: call.data.startswith('product'))
async def choose_pack(call: CallbackQuery):
    product_id, pack_id = map(int, call.data.split(':')[1:])
    await call.message.answer(
        '–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!\n***–ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ä–∞–π–æ–Ω:***',
        parse_mode='markdown',
        reply_markup=await keyboards.get_areas(product_id, pack_id)
    )


@dp.callback_query_handler(lambda call: call.data.startswith('area'))
async def get_full_product(call: CallbackQuery):
    product_pk, pack_pk, area_pk = map(int, call.data.split(':')[1:])
    product = await Product.objects.aget(pk=product_pk)
    user = await TelegramUser.objects.aget(user_id=call.message.chat.id)
    pack = await Pack.objects.aget(pk=pack_pk)
    area = await Area.objects.aget(pk=area_pk)
    desc = product.description if product.description else ''
    pr = Product.objects.select_related('city')
    city = (await pr.aget(pk=product_pk)).city

    if product.photo:
        return await call.message.answer_photo(
            open(os.path.join(MEDIA_ROOT, str(product.photo)), 'rb'),
            f'***{product.name} {pack.weight} –≥ *** _({city.name}, {area.name})_\n\n'
            f'_{desc}_\n\n'
            f'–¶–µ–Ω–∞: {pack.price} —Ä—É–±.\n\n'
            '–£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å–∫–∏–¥–∫–∏! –ü–æ–∫—É–ø–∞–π—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω–µ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —Å–∫–∏–¥–∫—É –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤\n\n'
            f'***–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {user.balance} —Ä—É–±. ({round(user.balance/get_course(), 6)} BTC)***',
            parse_mode='markdown',
            reply_markup=keyboards.get_buy(pack.price, pre_order=product.pre_order)
        )

    await call.message.answer(
        f'***{product.name} {pack.weight} –≥. *** *({city.name}, {area.name})*\n\n'
        f'*{desc}*\n\n'
        f'–¶–µ–Ω–∞: {pack.price} —Ä—É–±.\n\n'
        '–£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å–∫–∏–¥–∫–∏! –ü–æ–∫—É–ø–∞–π—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω–µ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —Å–∫–∏–¥–∫—É –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤\n\n'
        f'***–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {user.balance} —Ä—É–±. ({round(user.balance/get_course(), 6)} BTC)***',
        parse_mode='markdown',
        reply_markup=keyboards.get_buy(pack.price, pre_order=product.pre_order)
    )


@dp.callback_query_handler(lambda call: call.data.startswith('buy'))
async def go_to_buy(call: CallbackQuery):
    price = int(call.data.split(':')[1])
    await call.message.answer(
        f'–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞! –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞ –Ω–∞ —Å—É–º–º—É {price} —Ä—É–±.:',
        reply_markup=keyboards.get_inline_add_balance(price)
    )


@dp.callback_query_handler(lambda call: call.data.startswith('request_to_pay'))
async def inline_pay(call: CallbackQuery):
    amount = int(call.data.replace('request_to_pay:', ''))
    await call.message.answer(
        '–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ **#404933**\n'
        '–°–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: LTC\n'
        f'–ù–∞ –±–∞–ª–∞–Ω—Å: *{amount} —Ä—É–±*.\n\n'
        'üëá üëá üëá\n'
        f'–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: `{round(amount/get_course(), 4)}` LTC\n'
        '‚òùÔ∏è ‚òùÔ∏è ‚òùÔ∏è\n\n'
        '‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –¥–ª—è –æ–ø–ª–∞—Ç—ã! ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è\n'
        '–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã! –£ –≤–∞—Å –±—É–¥–µ—Ç 30 –º–∏–Ω—É—Ç –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ –±—ã –æ–ø–ª–∞—Ç–∏—Ç—å.'
        '–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.',
        parse_mode='markdown',
        reply_markup=keyboards.accept(amount)
    )


@dp.callback_query_handler(lambda call: call.data == 'pre_order')
async def get_pre_order(call: CallbackQuery):
    await call.message.delete()
    cities = [i async for i in City.objects.all()]
    await call.message.answer(
        '***–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥:***',
        reply_markup=keyboards.choose_city(cities, prefix=True),
        parse_mode='markdown'
    )


@dp.callback_query_handler(lambda call: call.data.startswith('comments'))
async def get_comment(call: CallbackQuery):
    page_number = int(call.data.replace('comments:', ''))
    comment, comments = await get_comment_by_page(page_number)

    if call.message.caption:
        await call.message.delete()
        await call.message.answer(
            '–†–µ–π—Ç–∏–Ω–≥ –º–∞–≥–∞–∑–∏–Ω–∞: ‚≠êÔ∏è ***4,8/5 (2113 —à—Ç.)***\n\n'
            '***–í–∞—à–∏ –æ—Ç–∑—ã–≤—ã –¥–µ–ª–∞—é—Ç –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω –ª—É—á—à–µ!***\n\n'
            f'{"‚≠êÔ∏è"*comment.count_star}\n'
            f'_{comment.content}_\n'
            f'{comment.date}\n\n\n'
            f'***–û—Ç–∑—ã–≤—ã –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –∫ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–º –ø–æ–∫—É–ø–∫–∞–º.***',
            parse_mode='markdown',
            reply_markup=keyboards.get_comment_paginator(page_number, comments)
        )
    else:
        await call.message.edit_text(
            '–†–µ–π—Ç–∏–Ω–≥ –º–∞–≥–∞–∑–∏–Ω–∞: ‚≠êÔ∏è <b>4,8/5 (2113 —à—Ç.)</b>\n\n'
            '<b>–í–∞—à–∏ –æ—Ç–∑—ã–≤—ã –¥–µ–ª–∞—é—Ç –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω –ª—É—á—à–µ!</b>\n\n'
            f'{"‚≠êÔ∏è" * comment.count_star}\n'
            f'<i>{comment.content}</i>\n'
            f'{comment.date}\n\n\n'
            f'<b>–û—Ç–∑—ã–≤—ã –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –∫ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–º –ø–æ–∫—É–ø–∫–∞–º.</b>',
            parse_mode='html',
            reply_markup=keyboards.get_comment_paginator(page_number, comments)
        )


@dp.callback_query_handler(lambda call: call.data == 'list_goods')
async def get_list_goods(call: CallbackQuery):
    text = ''
    number = 0

    async for city in City.objects.all():
        products = [i async for i in Product.objects.filter(city=city)]
        if products:
            text += f'–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã "{city.name}"\n'
        for product in products:
            async for pack in product.packs.all():
                number += 1
                text += f'<b>{number}) {product.name}, {pack.weight} –≥ - {pack.price} —Ä—É–±.</b>\n'
                async for area in pack.areas.all():
                    text += f'<i>{area.name}</i>\n'
                text += '\n'

    await call.message.answer(
        text,
        reply_markup=keyboards.get_start(),
        parse_mode='html'
    )


@sync_to_async
def get_comment_by_page(page_number):
    comments = Comment.objects.all()
    p = Paginator(comments, 1)
    comment = p.page(page_number).object_list[0]
    return comment, len(comments)

#
# @dp.message_handler(Text('–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'))
# async def get_balance(message: Message):
#     user = (await TelegramUser.objects.aget_or_create(user_id=message.chat.id, username=message.chat.username))[0]
#     course = get_course(user.balance)
#
#     await states.EnterAmount.enter.set()
#     await message.answer(
#         f'–í–∞—à –±–∞–ª–∞–Ω—Å:  {course["rub"]} RUB / {course["btc"]} BTC / {course["ltc"]} LTC\n'
#         '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ RUB. –ú–∏–Ω–∏–º—É–º –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 100 RUB',
#         reply_markup=keyboards.balance
#     )
#
#
# @dp.message_handler(state=states.EnterAmount.enter)
# async def enter_amount(message: Message, state: FSMContext):
#     if message.text.isdigit():
#         amount = int(message.text)
#         if amount < 100:
#             return await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ RUB. –ú–∏–Ω–∏–º—É–º –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 100 RUB')
#         user = await TelegramUser.objects.aget(user_id=message.chat.id)
#         course = get_course(user.balance)
#
#         await states.EnterAmount.select_payment.set()
#         await state.set_data({'amount': amount})
#
#         return await message.answer(
#             f'<b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b>  {course["rub"]} RUB / {course["btc"]} BTC / {course["ltc"]} LTC\n\n\n\n'
#             f'<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b>',
#             parse_mode='html',
#             reply_markup=keyboards.payments_keyboard
#         )
#
#     await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ RUB. –ú–∏–Ω–∏–º—É–º –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 100 RUB')
#
#
# @dp.message_handler(Text('–ò–Ω—ä–µ–∫—Ü–∏–∏'), state='*')
# async def injection(message: Message, state: FSMContext):
#     await state.reset_data()
#     await state.finish()
#     await message.answer('https://telegra.ph/Vnutrivennyj-priem-narkotikov-05-15-2', reply_markup=keyboards.injection)
#
#
# @dp.message_handler(Text('–ü–æ–º–æ—â—å'), state='*')
# async def get_help(message: Message, state: FSMContext):
#     await state.reset_data()
#     await state.finish()
#     await message.answer('@Tigr_lip', reply_markup=keyboards.assistance)
#
#
# @dp.message_handler(commands='otzivi', state='*')
# async def get_comments(message: Message, state=FSMContext):
#     await states.GetComments.next_comments.set()
#     num_page = (await state.get_data()).get('page', 1)
#
#     try:
#         page = await get_comments_page(num_page)
#     except paginator.EmptyPage:
#         await state.set_data({'page': 1})
#         return await get_comments(message, state)
#
#     text = ''
#
#     async for com in page:
#         text += f'‚ûñ‚ûñ–û—Ç {com.nickname} {com.date}‚ûñ‚ûñ\n' \
#                f'{com.content}\n\n'
#
#     await state.update_data({'page': num_page + 1})
#     await message.answer(
#         '–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ (–Ω–∞–∂–º–∏—Ç–µ üëâ /otzivi)\n\n' + text,
#         reply_markup=keyboards.injection
#     )
#
#
# @sync_to_async
# def get_comments_page(num_page):
#     comments = paginator.Paginator(Comment.objects.all(), 5)
#     return comments.page(num_page).object_list
#
#
# @dp.message_handler(Text('–°–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É'), state='*')
# async def buy_product(message: Message):
#     user = await TelegramUser.objects.aget(user_id=message.chat.id)
#     course = get_course(user.balance)
#
#     await states.BuyProduct.select_city.set()
#
#     await message.answer(
#         f'<b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b>  {course["rub"]} RUB / {course["btc"]} BTC / {course["ltc"]} LTC\n\n'
#         '<b>–î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –≤–Ω–∏–∑—É:</b>',
#         parse_mode='html',
#         reply_markup=await keyboards.keyboard_builder(City.objects.all(), 'name')
#     )
#
#
# @dp.message_handler(lambda message: message.text in PAYMENTS, state=states.EnterAmount.select_payment)
# async def select_payment(message: Message, state: FSMContext):
#     amount = (await state.get_data())['amount']
#     title = message.text
#     obj = await PaymentCrypto.objects.aget(title=title)
#     after_buy = (await state.get_data()).get('buy', False)
#
#     await state.update_data({'payment': obj})
#     if obj:
#         r = requests.get(f'https://apirone.com/api/v2/ticker?currency={obj.code}').json()['rub']
#         st = f'{await get_user_balance_in_text(message.chat.id)}\n\n' if not after_buy else ''
#         middle = '<b>–ö–∞–∫ –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–∏—Ç—Å—è - –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –ø–æ–∫—É–ø–∫–∞–º.</b>\n' if not after_buy else ''
#         await message.answer(
#             st +
#             f'<b>–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {obj.code.upper()}</b>\n' +
#             middle +
#             '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
#             f'<b>–ö–æ—à–µ–ª–µ–∫:</b> {obj.card}\n'
#             f'<b>–°—É–º–º–∞:</b> {round(amount/r, 8)} {obj.code.upper()}\n'
#             f'<b>–ö—É—Ä—Å:</b> {int(r)} RUB/{obj.code.upper()}\n'
#             '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
#             '<b>–ß–¢–û–ë–´ –û–ü–õ–ê–¢–ê –ë–´–°–¢–†–ï–ï –ó–ê–ß–ò–°–õ–ò–õ–ê–°–¨, –°–¢–ê–í–¨–¢–ï –í–´–°–û–ö–£–Æ –ö–û–ú–ò–°–°–ò–Æ</b>\n\n'
#             f'–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∞–∂–º–∏—Ç–µ üëâ /my{obj.code.lower()}',
#             parse_mode='html',
#             reply_markup=keyboards.buy if not after_buy else keyboards.after_select_keyboard
#         )
#
#     else:
#         await message.answer(
#             '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n'
#             '–î–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É'
#         )
#
#
# @dp.message_handler(Text('üí∞–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—Éüí∞'), state=states.EnterAmount.select_payment)
# async def check_pay(message: Message, state: FSMContext):
#     await asyncio.sleep(random.randint(5, 10))
#     amount = (await state.get_data())['amount']
#     obj = (await state.get_data())['payment']
#     if obj:
#         r = requests.get(f'https://apirone.com/api/v2/ticker?currency={obj.code}').json()['rub']
#
#         user = await TelegramUser.objects.aget(user_id=message.chat.id)
#         course = get_course(user.balance)
#
#         await message.answer(
#             f'<b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b>  {course["rub"]} RUB / {course["btc"]} BTC / {course["ltc"]} LTC\n\n'
#             f'<b>–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {obj.code.upper()}</b>\n'
#             '<b>–ö–∞–∫ –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–∏—Ç—Å—è - –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –ø–æ–∫—É–ø–∫–∞–º.</b>\n'
#             '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
#             f'<b>–ö–æ—à–µ–ª–µ–∫:</b> {obj.card}\n'
#             f'<b>–°—É–º–º–∞:</b> {round(amount/r, 8)} {obj.code.upper()}\n'
#             f'<b>–ö—É—Ä—Å:</b> {int(r)} RUB/{obj.code.upper()}\n'
#             '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
#             '<b>–ß–¢–û–ë–´ –û–ü–õ–ê–¢–ê –ë–´–°–¢–†–ï–ï –ó–ê–ß–ò–°–õ–ò–õ–ê–°–¨, –°–¢–ê–í–¨–¢–ï –í–´–°–û–ö–£–Æ –ö–û–ú–ò–°–°–ò–Æ</b>\n\n'
#             f'–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∞–∂–º–∏—Ç–µ üëâ /my{obj.code.lower()}',
#             parse_mode='html',
#             reply_markup=keyboards.buy
#         )
#
#     else:
#         await message.answer(
#             '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n'
#             '–î–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É'
#         )
#
#
# @dp.message_handler(state=states.BuyProduct.select_city)
# async def select_city(message: Message, state: FSMContext):
#     try:
#         city = await City.objects.aget(name=message.text)
#     except City.DoesNotExist:
#         return await message.answer(
#             '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n'
#             '–î–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É',
#             reply_markup=await keyboards.keyboard_builder(City.objects.all(), 'name')
#         )
#
#     await state.update_data({'city': city})
#     await states.BuyProduct.select_product.set()
#
#     await message.answer(
#         f'{await get_user_balance_in_text(message.chat.id)}\n\n'
#         f'<b>–í—ã –≤—ã–±—Ä–∞–ª–∏</b> "{city.name}"\n\n'
#         '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
#         f'üè° <b>–ì–æ—Ä–æ–¥:</b> {city.name}\n'
#         '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n'
#         '<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:</b>',
#         parse_mode='html',
#         reply_markup=await keyboards.keyboard_builder(Product.objects.filter(city=city), 'name')
#     )
#
#
# @dp.message_handler(state=states.BuyProduct.select_product)
# async def select_product(message: Message, state: FSMContext):
#     user_data = await state.get_data()
#     city = user_data['city']
#     try:
#         product = await Product.objects.aget(name=message.text, city=city)
#     except Product.DoesNotExist:
#         return await message.answer(
#             '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n'
#             '–î–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É',
#             reply_markup=await keyboards.keyboard_builder(Product.objects.filter(city=city), 'name')
#         )
#
#     await state.update_data({'product': product})
#     await states.BuyProduct.select_count.set()
#     await state.get_data()
#
#     await message.answer(
#         f'{await get_user_balance_in_text(message.chat.id)}\n\n'
#         f'<b>–í—ã –≤—ã–±—Ä–∞–ª–∏</b> "{product.name}". \n\n'
#         '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
#         f'<b>üè° –ì–æ—Ä–æ–¥</b>: {city.name}\n'
#         f'<b>üì¶ –¢–æ–≤–∞—Ä</b>: {product.name}\n'
#         '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n'
#         '<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞—Å–æ–≤–∫—É</b>:',
#         reply_markup=await keyboards.keyboard_builder(product.packs.all(), '__str__'),
#         parse_mode='html'
#     )
#
#
# @dp.message_handler(state=states.BuyProduct.select_count)
# async def select_weight(message: Message, state: FSMContext):
#     user_data = await state.get_data()
#     city = user_data['city']
#     product = user_data['product']
#
#     if message.text not in [str(i) async for i in product.packs.all()]:
#         return await message.answer(
#             '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n'
#             '–î–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É',
#             reply_markup=await keyboards.keyboard_builder(Product.objects.filter(city=city), 'name')
#         )
#
#     pack_index = [str(i) async for i in product.packs.all()].index(message.text)
#     pack = [i async for i in product.packs.all()][pack_index]
#     await state.update_data({'pack': pack})
#     await states.BuyProduct.select_area.set()
#
#     await message.answer(
#         f'{await get_user_balance_in_text(message.chat.id)}\n\n'
#         f'<b>–í—ã –≤—ã–±—Ä–∞–ª–∏</b> "{str(pack)}". \n\n'
#         '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
#         f'<b>üè° –ì–æ—Ä–æ–¥</b>: {city.name}\n'
#         f'<b>üì¶ –¢–æ–≤–∞—Ä</b>: {product.name}\n'
#         f'<b>üìã –§–∞—Å–æ–≤–∫–∞:</b> {str(pack).replace("—Ä—É–±", "—Ä—É–±–ª–µ–π")}\n'
#         '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n'
#         '<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω</b>:',
#         reply_markup=await keyboards.keyboard_builder(pack.areas.all(), 'name'),
#         parse_mode='html',
#     )
#
#
# @dp.message_handler(state=states.BuyProduct.select_area)
# async def select_area(message: Message, state: FSMContext):
#     user_data = await state.get_data()
#     city = user_data['city']
#     product = user_data['product']
#     pack = user_data['pack']
#
#     if message.text not in [i.name async for i in pack.areas.all()]:
#         return await message.answer(
#             '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n'
#             '–î–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É',
#             reply_markup=await keyboards.keyboard_builder(Product.objects.filter(city=city), 'name')
#         )
#     area_index = [i.name async for i in pack.areas.all()].index(message.text)
#     area = [i async for i in pack.areas.all()][area_index]
#     await state.update_data({'pack': area})
#
#     await states.EnterAmount.select_payment.set()
#     await state.set_data({'amount': pack.price, 'buy': True})
#
#     await message.answer(
#         f'<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ </b>"{area.name}".\n\n'
#         '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
#         f'<b>üè° –ì–æ—Ä–æ–¥:</b> {city.name}\n'
#         f'<b>üì¶ –¢–æ–≤–∞—Ä:</b> {product.name}\n'
#         f'<b>üìã –†–∞–π–æ–Ω:</b> {area.name}\n'
#         f'<b>üìã –§–∞—Å–æ–≤–∫–∞:</b> {str(pack).replace("—Ä—É–±", "—Ä—É–±–ª–µ–π")}\n'
#         '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n'
#         '<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b>',
#         parse_mode='html',
#         reply_markup=keyboards.payments_keyboard
#     )
#
#
# @dp.message_handler(commands=['mybtc', 'myltc'])
# async def get_address(message: Message):
#     code = message.text.replace('/my', '')
#     await message.answer(
#         (await PaymentCrypto.objects.aget(code=code)).card
#     )
#
#
# @dp.message_handler(Text('–ü—Ä–∞–π—Å'))
# async def get_price_list(message: Message):
#     await states.BuyProduct.select_city.set()
#     await message.answer(
#         '–°–µ–π—á–∞—Å –≤ –Ω–∞–ª–∏—á–∏–∏:\n\n'
#         f'{await get_text_for_price_list()}'
#         f'{await get_user_balance_in_text(message.chat.id)}\n\n'
#         f'<b>–î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –≤–Ω–∏–∑—É:</b>',
#         parse_mode='html',
#         reply_markup=await keyboards.keyboard_builder(City.objects.all(), 'name')
#     )
#
#
# @dp.message_handler(Text('Visa/MasterCard'), state=states.EnterAmount.select_payment)
# async def select_exchange(message: Message, state: FSMContext):
#     amount = (await state.get_data()).get('amount')
#     await states.ExchangeCard.exchange_select.set()
#
#     await message.answer(
#         f'{await get_user_balance_in_text(message.chat.id)}\n\n'
#         f'–í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–±–º–µ–Ω–∞ –í—ã –ø–æ–ª—É—á–∏—Ç–µ BTC\n'
#         '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
#         '–í–ê–ñ–ù–û! –û–ø–ª–∞—Ç–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç—Å—è –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏. –î–∏–∞–ø–∞–∑–æ–Ω –∫–æ–ª–µ–±–∞–Ω–∏—è —Ü–µ–Ω—ã 1-50 —Ä—É–±–ª–µ–π.\n'
#         '–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã —É–∫–∞–∑–∞–Ω–Ω–∞—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤ –ü–†–ò–ë–õ–ò–ó–ò–¢–ï–õ–¨–ù–ê–Ø.\n'
#         '–¢–æ—á–Ω—É—é —Å—É–º–º—É –í—ã –ø–æ–ª—É—á–∏—Ç–µ –≤–º–µ—Å—Ç–µ —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É.\n'
#         '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
#         f'–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è : {amount} RUB.\n'
#         '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
#         '<b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–º–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç</b>\n'
#         '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
#         f'{await get_select_exchange_text(amount)}',
#         parse_mode='html',
#         reply_markup=await keyboards.keyboard_builder(Exchange.objects.all(), 'name')
#     )
#
#
# @dp.message_handler(state=states.ExchangeCard.exchange_select)
# async def exchange_pay(message: Message, state: FSMContext, obj=None):
#     amount = (await state.get_data()).get('amount')
#     if not obj:
#         try:
#             obj = await Exchange.objects.aget(name=message.text)
#         except Exchange.DoesNotExist:
#             return await select_exchange(message, state)
#
#     await state.update_data({'exc': obj})
#
#     await asyncio.sleep(random.randint(10, 15))
#     await states.ExchangeCard.check_payment.set()
#     await message.answer(
#         f'{await get_user_balance_in_text(message.chat.id)}\n\n'
#         '–í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–±–º–µ–Ω–∞ –í—ã –ø–æ–ª—É—á–∏—Ç–µ BTC\n'
#         '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
#         f'<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–±–º–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç {obj.name}\n'
#         '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
#         f'‚úÖ –ù–æ–º–µ—Ä –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏: {random.randint(12332479, 12882679)}\n'
#         f'‚úÖ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: {obj.card}\n'
#         f'‚úÖ –°—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {amount} RUB\n'
#         '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
#         '‚úÖ –í–´–î–ê–ù–ù–´–ï –†–ï–ö–í–ò–ó–ò–¢–´ –î–ï–ô–°–¢–í–£–Æ–¢ 30 –ú–ò–ù–£–¢\n'
#         '‚úÖ –í–´ –ü–û–¢–ï–†–Ø–ï–¢–ï –î–ï–ù–¨–ì–ò, –ï–°–õ–ò –û–ü–õ–ê–¢–ò–¢–ï –ü–û–ó–ñ–ï\n'
#         '‚úÖ –ü–ï–†–ï–í–û–î–ò–¢–ï –¢–û–ß–ù–£–Æ –°–£–ú–ú–£. –ù–ï–í–ï–†–ù–ê–Ø –°–£–ú–ú–ê –ù–ï –ë–£–î–ï–¢ –ó–ê–ß–ò–°–õ–ï–ù–ê.\n'
#         '‚úÖ –û–ü–õ–ê–¢–ê –î–û–õ–ñ–ù–ê –ü–†–û–•–û–î–ò–¢–¨ –û–î–ù–ò–ú –ü–õ–ê–¢–ï–ñ–û–ú.\n'
#         '‚úÖ –ü–†–û–ë–õ–ï–ú–´ –° –û–ü–õ–ê–¢–û–ô? –ü–ò–°–ê–¢–¨ –í TELEGRAM : babushkahelpbot\n'
#         '‚úÖ –° –ü–†–û–ë–õ–ï–ú–ù–û–ô –ó–ê–Ø–í–ö–û–ô –û–ë–†–ê–©–ê–ô–¢–ï–°–¨ –ù–ï –ü–û–ó–î–ù–ï–ï 24 –ß–ê–°–û–í –° –ú–û–ú–ï–ù–¢–ê –û–ü–õ–ê–¢–´.</b>',
#         reply_markup=keyboards.check_exchange,
#         parse_mode='html'
#     )
#
#
# @dp.message_handler(Text('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'), state=states.ExchangeCard.check_payment)
# async def check_exc(message: Message, state: FSMContext):
#     await asyncio.sleep(random.randint(10, 15))
#     await exchange_pay(message, state, (await state.get_data())['exc'])
#
#
# @dp.message_handler(Text('–û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É'), state=states.ExchangeCard.check_payment)
# async def cancel_exc(message: Message, state: FSMContext):
#     await state.reset_data()
#     await start(message, state)
#
#
# @sync_to_async
# def get_text_for_price_list():
#     text = ''
#     for city in City.objects.all():
#         text += f'‚ûñ‚ûñ‚ûñ<b>{city.name.upper()}</b>‚ûñ‚ûñ‚ûñ\n\n'
#         for product in Product.objects.filter(city=city):
#             pack_text = "\n".join([str(i) for i in product.packs.all()])
#             text += f'<b>{product.name}</b>\n' \
#                     f'{pack_text}\n\n'
#     return text
#
#
# @sync_to_async
# def get_select_exchange_text(amount):
#     text = ''
#
#     for exc in Exchange.objects.all():
#         text += f'<b>{exc.name}</b>\n–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ –ü–†–ò–ú–ï–†–ù–û: {round(amount*((100+exc.percent)/100), 2)} RUB\n\n'
#
#     return text
#

class Command(BaseCommand):
    help = 'not help'

    def handle(self, *args, **options):
        executor.Executor(dp).start_polling()
